// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BinaryBlockGenesis extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BinaryBlockGenesis entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BinaryBlockGenesis must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BinaryBlockGenesis", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BinaryBlockGenesis | null {
    return changetype<BinaryBlockGenesis | null>(
      store.get_in_block("BinaryBlockGenesis", id)
    );
  }

  static load(id: string): BinaryBlockGenesis | null {
    return changetype<BinaryBlockGenesis | null>(
      store.get("BinaryBlockGenesis", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get staked(): boolean {
    let value = this.get("staked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set staked(value: boolean) {
    this.set("staked", Value.fromBoolean(value));
  }

  get stakedBy(): string | null {
    let value = this.get("stakedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakedBy(value: string | null) {
    if (!value) {
      this.unset("stakedBy");
    } else {
      this.set("stakedBy", Value.fromString(<string>value));
    }
  }

  get totalEarnedRewards(): i32 {
    let value = this.get("totalEarnedRewards");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalEarnedRewards(value: i32) {
    this.set("totalEarnedRewards", Value.fromI32(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardsByBibkStaking(): i32 {
    let value = this.get("rewardsByBibkStaking");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rewardsByBibkStaking(value: i32) {
    this.set("rewardsByBibkStaking", Value.fromI32(value));
  }

  get rewardsByNftStaking(): i32 {
    let value = this.get("rewardsByNftStaking");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rewardsByNftStaking(value: i32) {
    this.set("rewardsByNftStaking", Value.fromI32(value));
  }

  get nfts(): BinaryBlockGenesisLoader {
    return new BinaryBlockGenesisLoader(
      "User",
      this.get("id")!.toString(),
      "nfts"
    );
  }

  get staked(): BinaryBlockGenesisLoader {
    return new BinaryBlockGenesisLoader(
      "User",
      this.get("id")!.toString(),
      "staked"
    );
  }

  get created(): BinaryBlockGenesisLoader {
    return new BinaryBlockGenesisLoader(
      "User",
      this.get("id")!.toString(),
      "created"
    );
  }
}

export class BinaryBlockGenesisLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BinaryBlockGenesis[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BinaryBlockGenesis[]>(value);
  }
}
